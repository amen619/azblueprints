[CmdletBinding()]
param
(
	[Parameter(Mandatory = $true)]
	$DevOpsPAT,

	[Parameter(Mandatory = $false)]
	$DevOpsUri = $env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI,

	[Parameter(Mandatory = $false)]
	$DevOpsProject = $env:SYSTEM_TEAMPROJECT,

	[Parameter(Mandatory = $false)]
	[string]$Location = $env:LOCATION
)
. $PSScriptRoot\_InitializeTests.ps1

$Context = Get-AzContext
$ManagementGroup = Get-AzManagementGroup | Where-Object DisplayName -eq "Development"
$BlueprintSubscription = Get-AzBlueprint -Name Example_Subscription -SubscriptionId $Context.Subscription.Id
$BlueprintManagementGroup = Get-AzBlueprint -Name Example_ManagementGroup -ManagementGroupId $ManagementGroup.Name
$RawBlueprint = (Get-Content -Raw "$($BlueprintsRoot)\Example\Blueprint.json" | ConvertFrom-Json)
$RawResourceGroups = $RawBlueprint.properties.resourceGroups.PSObject.Properties
$RawParameters = $RawBlueprint.properties.parameters.PSObject.Properties
$RawSecureParameters = $RawBlueprint.properties.parameters.PSObject.Properties
$ResourceGroups = Find-AzDevOpsBlueprintParameters -Type ResourceGroups -RawBlueprint $RawBlueprint -Location $Location
$Parameters = Find-AzDevOpsBlueprintParameters -Type Parameters -RawBlueprint $RawBlueprint
$SecureParameters = Find-AzDevOpsBlueprintParameters -Type SecureParameters -RawBlueprint $RawBlueprint
$envVariables = Get-ChildItem env:

Describe 'Module Manifest Tests' {
	It 'Passes Test-ModuleManifest' {
		Test-ModuleManifest -Path $Global:ModuleManifestPath | Should -Not -BeNullOrEmpty
		$? | Should -Be $true
	}
}

Describe 'PSScriptAnalyzer Rules' -Tag 'Meta' {
	$analysis = Invoke-ScriptAnalyzer -Path $ProjectRoot -Settings $TestsFolder\PSScriptAnalyzerSettings.psd1 -Recurse
	$scriptAnalyzerRules = Get-ScriptAnalyzerRule
	forEach ($rule in $scriptAnalyzerRules) {
		It "Should pass $rule" {
			If (($analysis) -and ($analysis.RuleName -contains $rule)) {
				$analysis | Where-Object RuleName -EQ $rule -OutVariable failures | Out-Default
				$failures.Count | Should Be 0
			}
		}
	}
}

Describe 'Function Get-AzDevOpsBlueprintParameters' {
	It "Blueprint Parameters created as Variable Groups in Azure DevOps" {
		# $env:DEVOPS_PAT is a secret environment variable generated by the PowerShell Task using the Azure DevOps predefined variable System.AccessToken. See https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/powershell?view=azure-devops
		$result = Get-AzDevOpsBlueprintParameters -InputPath "$($BlueprintsRoot)\Example" -DevOpsUri $DevOpsUri -DevOpsProject $DevOpsProject -DevOpsPAT $DevOpsPAT
		$result -match "BLUEPRINT_Resource_Groups" | Should -Be $true
		$result -match "BLUEPRINT_Parameters_Required" | Should -Be $true
		$result -match "BLUEPRINT_Parameters_Not_Required" | Should -Be $true
	}
}

Describe 'Function Get-AzDevOpsBlueprintVariableGroups' {
	It "Azure DevOps Variable Groups Exist" {
		# $env:DEVOPS_PAT is a secret environment variable generated by the PowerShell Task using the Azure DevOps predefined variable System.AccessToken. See https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/powershell?view=azure-devops
		$result = Get-AzDevOpsBlueprintVariableGroups -DevOpsUri $DevOpsUri -DevOpsProject $DevOpsProject -DevOpsPAT $DevOpsPAT
		, $result | Should -BeOfType [Object[]]
		$result | Where-Object Name -eq "BLUEPRINT_Resource_Groups" | Should -Be $true
		$result | Where-Object Name -eq "BLUEPRINT_Parameters_Required" | Should -Be $true
		$result | Where-Object Name -eq "BLUEPRINT_Parameters_Not_Required" | Should -Be $true
	}
}

# Reads ResourceGroups, Parameters and SecureParameters from Bluprint that dont have a value or has a Default Value to be overriden
# Checks for Environment Variables (from Variables defined in Azure DevOps Variable Groups) matching the ResourceGroups, Parameters and SecureParameters found in the Blueprint
# Converts the string values found in the Environment Variables to the type identified in the Blueprint

Describe 'Function Find-AzDevOpsBlueprintParameters (ResourceGroups Object)' {
	it 'ResourceGroups Object exists' {
		$ResourceGroups | Should -Not -BeNullOrEmpty
		$ResourceGroups | Should -BeOfType [HashTable]
	}
}

Describe 'Function Find-AzDevOpsBlueprintParameters (Parameters Object)' {
	it 'Parameters Object exists' {
		$Parameters | Should -Not -BeNullOrEmpty
		$Parameters | Should -BeOfType [HashTable]
	}
}

Describe 'Function Find-AzDevOpsBlueprintParameters (SecureParameters Object)' {
	it 'SecureParameters Object exists' {
		$SecureParameters | Should -Not -BeNullOrEmpty
		$SecureParameters| Should -BeOfType [HashTable]
	}
}

Describe 'Function Find-AzDevOpsBlueprintParameters (ResourceGroups)' {
	it 'ResourceGroup resource_default_test is in the Blueprint, but does not match an Azure DevOps Variable' {
		$RawResourceGroups.Name | Should -Contain "resource_default_test"
		$envVariables.Name | Should -Not -Contain "RG_resource_default_test"
	}

	it 'ResourceGroup resource_test is in the Blueprint, ResourceGroups Object as a Hashtable and matches an Azure DevOps Variable and is a String' {
		$RawResourceGroups.Name | Should -Contain "resource_test"
		$ResourceGroups.Keys | Should -Contain "resource_test"
		$ResourceGroups["resource_test"] | Should -BeOfType [Hashtable]
		$envVariables.Name | Should -Contain "RG_resource_test"
		($envVariables | Where-Object Name -eq "RG_resource_test").Value | Should -BeOfType [String]
	}
}


Describe 'Function Find-AzDevOpsBlueprintParameters (Blueprint String Parameters)' {
	it 'Parameter blueprint_default_string, blueprint_override_string and blueprint_string are in the Blueprint as a String' {
		$RawParameters.Name | Should -Contain "blueprint_default_string" # In Blueprint?
		$RawParameters.Name | Should -Contain "blueprint_override_string" # In Blueprint?
		$RawParameters.Name | Should -Contain "blueprint_string" # In Blueprint?
		($RawParameters | Where-Object Name -eq "blueprint_default_string").Value.Type | Should -Be "string" # Is the Value in the Blueprint a String?
		($RawParameters | Where-Object Name -eq "blueprint_override_string").Value.Type | Should -Be "string" # Is the Value in the Blueprint a String?
		($RawParameters | Where-Object Name -eq "blueprint_string").Value.Type | Should -Be "string" # Is the Value in the Blueprint a String?
	}

	it 'Parameter blueprint_default_string is not in the Parameters Object' {
		$Parameters.Keys | Should -Not -Contain "blueprint_default_string" # Not in Parameters Object?
	}

	it 'Parameter blueprint_default_string does not have an Azure DevOps Variable' {
		$envVariables.Name | Should -Not -Contain "BP_blueprint_default_string" # Not match an Environment Variable?
	}

	it 'Parameter blueprint_override_string and blueprint_string are in the Parameters Object and are String Values' {
		$Parameters.Keys | Should -Contain "blueprint_override_string" # In Parameters Object?
		$Parameters.Keys | Should -Contain "blueprint_string" # In Parameters Object?
		$Parameters["blueprint_override_string"] | Should -BeOfType [String]
		$Parameters["blueprint_string"] | Should -BeOfType [String]
	}

	it 'Parameter blueprint_override_string and blueprint_string have an Azure DevOps Variable and are String Values' {
		$envVariables.Name | Should -Contain "BP_blueprint_override_string" # Matches an Environment Variable?
		$envVariables.Name | Should -Contain "BP_blueprint_string" # Matches an Environment Variable?
		($envVariables | Where-Object Name -eq "BP_blueprint_override_string").Value | Should -BeOfType [String]
		($envVariables | Where-Object Name -eq "BP_blueprint_string").Value | Should -BeOfType [String]
	}

	it 'Parameter blueprint_override_string overrides the original value in the Blueprint' {
		($envVariables | Where-Object Name -eq "BP_blueprint_override_string").Value | Should -Not -Be ($RawParameters | Where-Object Name -eq "blueprint_override_string").Value.DefaultValue # Is the Environment Variable Value different than the Blueprint Default Value?
	}
}

Describe 'Function Find-AzDevOpsBlueprintParameters (Blueprint Object Parameters)' {
	it 'Parameter blueprint_default_object, blueprint_override_object and blueprint_object are in the Blueprint as an Object' {
		$RawParameters.Name | Should -Contain "blueprint_default_object" # In Blueprint?
		$RawParameters.Name | Should -Contain "blueprint_override_object" # In Blueprint?
		$RawParameters.Name | Should -Contain "blueprint_object" # In Blueprint?
		($RawParameters | Where-Object Name -eq "blueprint_default_object").Value.Type | Should -Be "object" # Is the Value in the Blueprint an Object?
		($RawParameters | Where-Object Name -eq "blueprint_override_object").Value.Type | Should -Be "object" # Is the Value in the Blueprint an Object?
		($RawParameters | Where-Object Name -eq "blueprint_object").Value.Type | Should -Be "object" # Is the Value in the Blueprint an Object?
	}

	it 'Parameter blueprint_default_object is not in the Parameters Object' {
		$Parameters.Keys | Should -Not -Contain "blueprint_default_object" # Not in Parameters Object?
	}

	it 'Parameter blueprint_default_object does not have an Azure DevOps Variable' {
		$envVariables.Name | Should -Not -Contain "BP_blueprint_default_object" # Not match an Environment Variable?
	}

	it 'Parameter blueprint_override_object and blueprint_object are in the Parameters Object and are Hashtable Values' {
		$Parameters.Keys | Should -Contain "blueprint_override_object" # In Parameters Object?
		$Parameters.Keys | Should -Contain "blueprint_object" # In Parameters Object?
		$Parameters["blueprint_override_object"] | Should -BeOfType [Hashtable] # Is the Value in the Parameters Object a Hashtable?
		$Parameters["blueprint_object"] | Should -BeOfType [Hashtable] # Is the Value in the Parameters Object a Hashtable?
	}

	it 'Parameter blueprint_override_object and blueprint_object have an Azure DevOps Variable and are String Values' {
		$envVariables.Name | Should -Contain "BP_blueprint_override_object" # Matches an Environment Variable?
		$envVariables.Name | Should -Contain "BP_blueprint_object" # Matches an Environment Variable?
		($envVariables | Where-Object Name -eq "BP_blueprint_override_object").Value | Should -BeOfType [String] # Is the Value in the Environment Variable a String?
		($envVariables | Where-Object Name -eq "BP_blueprint_object").Value | Should -BeOfType [String] # Is the Value in the Environment Variable a String?
	}

	it 'Parameter blueprint_override_object overrides the original value in the Blueprint' {
		($envVariables | Where-Object Name -eq "BP_blueprint_override_object").Value | Should -Not -Be ($RawParameters | Where-Object Name -eq "blueprint_override_object").Value.DefaultValue # Is the Environment Variable Value different than the Blueprint Default Value?
	}
}

Describe 'Function Find-AzDevOpsBlueprintParameters (Blueprint Array Parameters)' {
	it 'Parameter blueprint_default_array, blueprint_override_array and blueprint_array are in the Blueprint as an Array' {
		$RawParameters.Name | Should -Contain "blueprint_default_array" # In Blueprint?
		$RawParameters.Name | Should -Contain "blueprint_override_array" # In Blueprint?
		$RawParameters.Name | Should -Contain "blueprint_array" # In Blueprint?
		($RawParameters | Where-Object Name -eq "blueprint_default_array").Value.Type | Should -Be "array" # Is the Value in the Blueprint an Array?
		($RawParameters | Where-Object Name -eq "blueprint_override_array").Value.Type | Should -Be "array" # Is the Value in the Blueprint an Array?
		($RawParameters | Where-Object Name -eq "blueprint_array").Value.Type | Should -Be "array" # Is the Value in the Blueprint an Array?
	}

	it 'Parameter blueprint_default_array is not in the Parameters Array' {
		$Parameters.Keys | Should -Not -Contain "blueprint_default_array" # Not in Parameters Array?
	}

	it 'Parameter blueprint_default_array does not have an Azure DevOps Variable' {
		$envVariables.Name | Should -Not -Contain "BP_blueprint_default_array" # Not match an Environment Variable?
	}

	it 'Parameter blueprint_override_array and blueprint_array are in the Parameters Array and are Hashtable Values' {
		$Parameters.Keys | Should -Contain "blueprint_override_array" # In Parameters Object?
		$Parameters.Keys | Should -Contain "blueprint_array" # In Parameters Object?
		, $Parameters["blueprint_override_array"] | Should -BeOfType [String[]] # Is the Value in the Parameters Object a String Array?
		, $Parameters["blueprint_array"] | Should -BeOfType [String[]] # Is the Value in the Parameters Object a String Array?
	}

	it 'Parameter blueprint_override_array and blueprint_array have an Azure DevOps Variable and are String Values' {
		$envVariables.Name | Should -Contain "BP_blueprint_override_array" # Matches an Environment Variable?
		$envVariables.Name | Should -Contain "BP_blueprint_array" # Matches an Environment Variable?
		($envVariables | Where-Object Name -eq "BP_blueprint_override_array").Value | Should -BeOfType [String] # Is the Value in the Environment Variable a String?
		($envVariables | Where-Object Name -eq "BP_blueprint_array").Value | Should -BeOfType [String] # Is the Value in the Environment Variable a String?
	}

	it 'Parameter blueprint_override_array overrides the original value in the Blueprint' {
		($envVariables | Where-Object Name -eq "BP_blueprint_override_array").Value | Should -Not -Be ($RawParameters | Where-Object Name -eq "blueprint_override_array").Value.DefaultValue # Is the Environment Variable Value different than the Blueprint Default Value?
	}
}

Describe 'Function Find-AzDevOpsBlueprintParameters (Blueprint Integer Parameters)' {
	it 'Parameter blueprint_default_integer, blueprint_override_integer and blueprint_integer are in the Blueprint as an Integer' {
		$RawParameters.Name | Should -Contain "blueprint_default_integer" # In Blueprint?
		$RawParameters.Name | Should -Contain "blueprint_override_integer" # In Blueprint?
		$RawParameters.Name | Should -Contain "blueprint_integer" # In Blueprint?
		($RawParameters | Where-Object Name -eq "blueprint_default_integer").Value.Type | Should -Be "int" # Is the Value in the Blueprint an Integer?
		($RawParameters | Where-Object Name -eq "blueprint_override_integer").Value.Type | Should -Be "int" # Is the Value in the Blueprint an Integer?
		($RawParameters | Where-Object Name -eq "blueprint_integer").Value.Type | Should -Be "int" # Is the Value in the Blueprint an Integer?
	}

	it 'Parameter blueprint_default_integer is not in the Parameters Integer' {
		$Parameters.Keys | Should -Not -Contain "blueprint_default_integer" # Not in Parameters Integer?
	}

	it 'Parameter blueprint_default_integer does not have an Azure DevOps Variable' {
		$envVariables.Name | Should -Not -Contain "BP_blueprint_default_integer" # Not match an Environment Variable?
	}

	it 'Parameter blueprint_override_integer and blueprint_integer are in the Parameters Integer and are Hashtable Values' {
		$Parameters.Keys | Should -Contain "blueprint_override_integer" # In Parameters Object?
		$Parameters.Keys | Should -Contain "blueprint_integer" # In Parameters Object?
		$Parameters["blueprint_override_integer"] | Should -BeOfType [Int] # Is the Value in the Parameters Object an Integer?
		$Parameters["blueprint_integer"] | Should -BeOfType [Int] # Is the Value in the Parameters Object an Integer?
	}

	it 'Parameter blueprint_override_integer and blueprint_integer have an Azure DevOps Variable and are String Values' {
		$envVariables.Name | Should -Contain "BP_blueprint_override_integer" # Matches an Environment Variable?
		$envVariables.Name | Should -Contain "BP_blueprint_integer" # Matches an Environment Variable?
		($envVariables | Where-Object Name -eq "BP_blueprint_override_integer").Value | Should -BeOfType [String] # Is the Value in the Environment Variable a String?
		($envVariables | Where-Object Name -eq "BP_blueprint_integer").Value | Should -BeOfType [String] # Is the Value in the Environment Variable a String?
	}

	it 'Parameter blueprint_override_integer overrides the original value in the Blueprint' {
		($envVariables | Where-Object Name -eq "BP_blueprint_override_integer").Value | Should -Not -Be ($RawParameters | Where-Object Name -eq "blueprint_override_integer").Value.DefaultValue # Is the Environment Variable Value different than the Blueprint Default Value?
	}
}

Describe 'Function Find-AzDevOpsBlueprintParameters (Template String Parameters)' {
	it 'Parameter template1_default_string, template1_override_string and template1_string are in the Blueprint as a String' {
		$RawParameters.Name | Should -Contain "template1_default_string" # In Blueprint?
		$RawParameters.Name | Should -Contain "template1_override_string" # In Blueprint?
		$RawParameters.Name | Should -Contain "template1_string" # In Blueprint?
		($RawParameters | Where-Object Name -eq "template1_default_string").Value.Type | Should -Be "string" # Is the Value in the Blueprint a String?
		($RawParameters | Where-Object Name -eq "template1_override_string").Value.Type | Should -Be "string" # Is the Value in the Blueprint a String?
		($RawParameters | Where-Object Name -eq "template1_string").Value.Type | Should -Be "string" # Is the Value in the Blueprint a String?
	}

	it 'Parameter template1_default_string is not in the Parameters Object' {
		$Parameters.Keys | Should -Not -Contain "template1_default_string" # Not in Parameters Object?
	}

	it 'Parameter template1_default_string does not have an Azure DevOps Variable' {
		$envVariables.Name | Should -Not -Contain "BP_template1_default_string" # Not match an Environment Variable?
	}

	it 'Parameter template1_override_string and template1_string are in the Parameters Object and are String Values' {
		$Parameters.Keys | Should -Contain "template1_override_string" # In Parameters Object?
		$Parameters.Keys | Should -Contain "template1_string" # In Parameters Object?
		$Parameters["template1_override_string"] | Should -BeOfType [String]
		$Parameters["template1_string"] | Should -BeOfType [String]
	}

	it 'Parameter template1_override_string and template1_string have an Azure DevOps Variable and are String Values' {
		$envVariables.Name | Should -Contain "BP_template1_override_string" # Matches an Environment Variable?
		$envVariables.Name | Should -Contain "BP_template1_string" # Matches an Environment Variable?
		($envVariables | Where-Object Name -eq "BP_template1_override_string").Value | Should -BeOfType [String]
		($envVariables | Where-Object Name -eq "BP_template1_string").Value | Should -BeOfType [String]
	}

	it 'Parameter template1_override_string overrides the original value in the Blueprint' {
		($envVariables | Where-Object Name -eq "BP_template1_override_string").Value | Should -Not -Be ($RawParameters | Where-Object Name -eq "template1_override_string").Value.DefaultValue # Is the Environment Variable Value different than the Blueprint Default Value?
	}

	it 'Parameter template1_default_string, template1_override_string and template1_string are in the Blueprint as a String' {
		$RawParameters.Name | Should -Contain "template1_default_string" # In Blueprint?
		$RawParameters.Name | Should -Contain "template1_override_string" # In Blueprint?
		$RawParameters.Name | Should -Contain "template1_string" # In Blueprint?
		($RawParameters | Where-Object Name -eq "template1_default_string").Value.Type | Should -Be "string" # Is the Value in the Blueprint a String?
		($RawParameters | Where-Object Name -eq "template1_override_string").Value.Type | Should -Be "string" # Is the Value in the Blueprint a String?
		($RawParameters | Where-Object Name -eq "template1_string").Value.Type | Should -Be "string" # Is the Value in the Blueprint a String?
	}
}

Describe 'Function Find-AzDevOpsBlueprintParameters (Template Secure String Parameters)' {
	it 'Parameter template2_secure_string is in the Blueprint as a Secure String' {
		$RawSecureParameters.Name | Should -Contain "template2_secure_string" # In Blueprint?
		($RawSecureParameters | Where-Object Name -eq "template2_secure_string").Value.Type | Should -Be "securestring" # Is the Value in the Blueprint a Secure String?
	}

	it 'Parameter template2_secure_string is in the Parameters Object and has a Hashtable Value' {
		$SecureParameters.Keys | Should -Contain "template2_secure_string" # In Parameters Object?
		$SecureParameters["template2_secure_string"] | Should -BeOfType [Hashtable] # Is the Value in the Blueprint a Hashtable?
	}

	it 'Parameter template2_secure_string has an Azure DevOps Variable and is a String Value containing a Resource ID for a Key Vault Secret' {
		$envVariables.Name | Should -Contain "BP_template2_secure_string" # Matches an Environment Variable?
		($envVariables | Where-Object Name -eq "BP_template2_secure_string").Value | Should -BeOfType [String] # Is the Value in the Environment Variable a String?
		($envVariables | Where-Object Name -eq "BP_template2_secure_string").Value.Contains('Microsoft.KeyVault/vaults') | Should -Be $true # Does the Value in the Environment Variable contain a Resource ID for a Key Vault Secret
	}
}

Describe 'Function New-AzDevOpsBlueprintAssignment (Assign Blueprint - Subscription)' {
	It "Example Blueprint Assignment to Subscription" {
		$Assignment = New-AzDevOpsBlueprintAssignment -Blueprint $BlueprintSubscription -AssignmentName "Example_Subscription" -InputPath "$($BlueprintsRoot)\Example" -Location $Location -Version "Subscription.TEST"
		$Assignment -match "SUCCESS!" | Should -Be $true
		(Get-AzBlueprintAssignment -Name "Example_Subscription" -Subscription $BlueprintSubscription.SubscriptionId).ProvisioningState | Should -Be "Succeeded"
	}
}

Describe 'Function New-AzDevOpsBlueprintAssignment (Assign Blueprint - Management Group)' {
	It "Example Blueprint Assignment to Management Group" {
		$Assignment = New-AzDevOpsBlueprintAssignment -Blueprint $BlueprintManagementGroup -AssignmentName "Example_ManagementGroup" -InputPath "$($BlueprintsRoot)\Example" -Location $Location -Version "ManagementGroup.TEST"
		$Assignment -match "SUCCESS!" | Should -Be $true
		(Get-AzBlueprintAssignment -Name "Example_ManagementGroup" -ManagementGroupId $BlueprintManagementGroup.ManagementGroupId).ProvisioningState | Should -Be "Succeeded"
	}
}

Describe 'Function Remove-AzDevOpsBlueprintAssignment (UnAssign Blueprint - Subscription)' {
	It "Example Blueprint UnAssignment from Subscription" {
		$Unassignment = Remove-AzDevOpsBlueprintAssignment -Blueprint $BlueprintSubscription -AssignmentName "Example_Subscription"
		$Unassignment -match "SUCCESS!" | Should -Be $true
		(Get-AzBlueprintAssignment -Name "Example_Subscription" -Subscription $BlueprintSubscription.SubscriptionId -ErrorAction SilentlyContinue) | Should -Be $null
	}
}

Describe 'Function Remove-AzDevOpsBlueprintAssignment (UnAssign Blueprint - Management Group)' {
	It "Example Blueprint UnAssignment from Management Group" {
		$Unassignment = Remove-AzDevOpsBlueprintAssignment -Blueprint $BlueprintManagementGroup -AssignmentName "Example_ManagementGroup"
		$Unassignment -match "SUCCESS!" | Should -Be $true
		(Get-AzBlueprintAssignment -Name "Example_ManagementGroup" -ManagementGroupId $BlueprintManagementGroup.ManagementGroupId -ErrorAction SilentlyContinue) | Should -Be $null
	}
}